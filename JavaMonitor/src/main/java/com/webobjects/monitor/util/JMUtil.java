package com.webobjects.monitor.util;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;
import java.time.Duration;

import com.webobjects.appserver.WOApplication;

/**
 * FIXME: Yet another class to serve as a temporary repository while we pull functionality from the UI // Hugi 2024-10-31
 */

public class JMUtil {

	/**
	 * @param hostName Name of host running wotaskd
	 * @param port wotaskd's port
	 * @param password wotaskd's password (hashed, as returned by the siteconfig)
	 * 
	 * @return An overview of wotaskd's adaptor info, as generated by wotaskd.
	 */
	public static String fetchWotaskdConfigurationString( final String hostName, final int port, final String password ) {
	
		final HttpRequest.Builder requestBuilder = HttpRequest
				.newBuilder()
				.uri( URI.create( "http://%s:%s/".formatted( hostName, port ) ) )
				.timeout( Duration.ofSeconds( 10 ) );
		
		if( password != null ) {
			requestBuilder.header( "password", password );
		}
	
		final HttpRequest request = requestBuilder.build();
	
		try {
			return HttpClient
					.newHttpClient()
					.send( request, BodyHandlers.ofString() )
					.body();
		}
		catch( IOException | InterruptedException e ) {
			e.printStackTrace();
			return "Failed to get response from wotaskd %s:%s".formatted( hostName, port );
		}
	}

	/**
	 * FIXME: Document, clean up // Hugi 2024-10-31
	 */
	public static boolean hostMeetsMinimumVersion( InetAddress anAddress ) {
		final byte[] versionRequest = ("womp://queryVersion").getBytes( StandardCharsets.UTF_8 );
		final DatagramPacket outgoingPacket = new DatagramPacket( versionRequest, versionRequest.length, anAddress, WOApplication.application().lifebeatDestinationPort() );
	
		final byte[] mbuffer = new byte[1000];
		final DatagramPacket incomingPacket = new DatagramPacket( mbuffer, mbuffer.length );
		DatagramSocket socket = null;
	
		try {
			socket = new DatagramSocket();
			socket.send( outgoingPacket );
			incomingPacket.setLength( mbuffer.length );
			socket.setSoTimeout( 2000 );
			socket.receive( incomingPacket );
			String reply = new String( incomingPacket.getData() );
			if( reply.startsWith( "womp://replyVersion/" ) ) {
				int lastIndex = reply.lastIndexOf( ":webObjects" );
				lastIndex += 11;
				String version = reply.substring( lastIndex );
				if( version.equals( "4.5" ) ) {
					return false;
				}
			}
			else {
				return false;
			}
		}
		catch( InterruptedIOException iioe ) {
			return true;
		}
		catch( SocketException se ) {
			return true;
		}
		catch( Throwable e ) {
			return false;
		}
		finally {
			if( socket != null ) {
				socket.close();
			}
		}
	
		return true;
	}

}
